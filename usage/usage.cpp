/* NOTE

This usage.cpp file has the basic elements I used while developing and troubleshooting, and is not too thorough for a usage file.

Please excuse the poor documentation. This problem might get solved in the future.

*/

#include <iostream>
#include <chrono>
#include <thread>
#include <vector>
#include "neuralnetwork-latest.h"
#include "cv2dp.h"

using namespace cv2dp;

void printMatrix(const std::vector<std::vector<float>> &matrix)
{
    std::cout << "{\n";
    for (size_t i = 0; i < matrix.size(); i++)
    {
        std::cout << "  {";
        for (size_t j = 0; j < matrix[i].size(); j++)
        {
            std::cout << matrix[i][j]; // Print with 6 decimal places
            if (j < matrix[i].size() - 1)
            {
                std::cout << ", ";
            }
        }
        std::cout << "}";
        if (i < matrix.size() - 1)
        {
            std::cout << "," << std::endl;
        }
    }
    std::cout << "\n}" << std::endl;
}

std::vector<std::vector<float>> input_zero = {{0.00}, {0.00}, {0.00}, {0.02}, {0.02}, {0.00}, {0.00}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.24}, {0.47}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.31}, {1.00}, {0.98}, {0.44}, {0.00}, {0.01}, {0.00}, {0.02}, {0.00}, {0.31}, {0.95}, {0.57}, {0.38}, {0.67}, {0.04}, {0.00}, {0.01}, {0.00}, {0.16}, {0.78}, {0.25}, {0.00}, {0.00}, {0.80}, {0.21}, {0.00}, {0.02}, {0.00}, {0.60}, {0.45}, {0.00}, {0.00}, {0.05}, {0.82}, {0.13}, {0.00}, {0.02}, {0.00}, {0.62}, {0.18}, {0.00}, {0.16}, {0.63}, {0.31}, {0.00}, {0.00}, {0.02}, {0.00}, {0.62}, {0.79}, {0.66}, {0.75}, {0.28}, {0.00}, {0.02}, {0.00}, {0.01}, {0.00}, {0.13}, {0.59}, {0.46}, {0.04}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_one = {{0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.09}, {0.16}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.76}, {0.60}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.03}, {0.00}, {0.41}, {0.85}, {0.05}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.01}, {0.08}, {0.87}, {0.28}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.73}, {0.63}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.29}, {0.97}, {0.13}, {0.01}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.79}, {0.59}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.73}, {0.25}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.02}, {0.03}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_two = {{0.01}, {0.00}, {0.01}, {0.01}, {0.00}, {0.00}, {0.00}, {0.02}, {0.01}, {0.00}, {0.01}, {0.00}, {0.00}, {0.01}, {0.32}, {0.54}, {0.30}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.20}, {0.81}, {0.88}, {0.82}, {0.94}, {0.75}, {0.05}, {0.00}, {0.01}, {0.00}, {0.10}, {0.30}, {0.00}, {0.04}, {0.84}, {0.87}, {0.04}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.30}, {0.96}, {0.87}, {0.17}, {0.00}, {0.01}, {0.01}, {0.01}, {0.00}, {0.53}, {0.87}, {0.41}, {0.03}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.51}, {0.92}, {0.11}, {0.02}, {0.30}, {0.58}, {0.29}, {0.00}, {0.02}, {0.00}, {0.60}, {1.00}, {0.85}, {0.96}, {0.89}, {0.82}, {0.24}, {0.00}, {0.01}, {0.00}, {0.02}, {0.36}, {0.55}, {0.32}, {0.04}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_three = {{0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.06}, {0.24}, {0.23}, {0.09}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.47}, {0.91}, {0.95}, {1.00}, {0.78}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.18}, {0.19}, {0.03}, {0.74}, {0.82}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.13}, {0.29}, {0.64}, {0.89}, {0.32}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.62}, {0.83}, {0.84}, {0.76}, {0.00}, {0.01}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.14}, {0.84}, {0.05}, {0.00}, {0.00}, {0.00}, {0.13}, {0.77}, {0.40}, {0.44}, {0.87}, {0.61}, {0.00}, {0.01}, {0.00}, {0.01}, {0.05}, {0.62}, {0.87}, {0.62}, {0.31}, {0.00}, {0.01}, {0.01}, {0.00}, {0.01}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_four = {{0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.17}, {0.27}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.04}, {0.03}, {0.00}, {0.69}, {0.32}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.60}, {0.11}, {0.23}, {0.68}, {0.00}, {0.01}, {0.00}, {0.01}, {0.00}, {0.30}, {0.67}, {0.00}, {0.70}, {0.23}, {0.00}, {0.01}, {0.02}, {0.00}, {0.35}, {0.86}, {0.67}, {0.78}, {0.67}, {0.00}, {0.02}, {0.00}, {0.01}, {0.02}, {0.40}, {0.06}, {0.47}, {0.77}, {0.29}, {0.02}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.15}, {0.75}, {0.06}, {0.00}, {0.02}, {0.01}, {0.00}, {0.00}, {0.01}, {0.01}, {0.23}, {0.27}, {0.00}, {0.02}, {0.01}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_five = {{0.00}, {0.00}, {0.01}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.04}, {0.13}, {0.24}, {0.12}, {0.00}, {0.01}, {0.00}, {0.11}, {0.63}, {0.75}, {0.92}, {0.70}, {0.53}, {0.19}, {0.00}, {0.00}, {0.00}, {0.06}, {0.53}, {0.84}, {0.24}, {0.17}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.53}, {0.38}, {0.00}, {0.01}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.03}, {0.05}, {0.59}, {0.58}, {0.05}, {0.01}, {0.00}, {0.01}, {0.01}, {0.00}, {0.00}, {0.02}, {0.39}, {1.00}, {0.18}, {0.00}, {0.00}, {0.02}, {0.00}, {0.07}, {0.38}, {0.85}, {0.82}, {0.31}, {0.02}, {0.01}, {0.00}, {0.01}, {0.20}, {0.72}, {0.77}, {0.40}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.01}, {0.04}, {0.07}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_six = {{0.00}, {0.00}, {0.00}, {0.02}, {0.02}, {0.00}, {0.06}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.03}, {0.00}, {0.32}, {0.44}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.25}, {0.49}, {0.02}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.04}, {0.55}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.26}, {0.35}, {0.26}, {0.29}, {0.00}, {0.02}, {0.00}, {0.00}, {0.01}, {0.00}, {0.40}, {0.27}, {0.25}, {0.42}, {0.16}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.44}, {0.09}, {0.00}, {0.32}, {0.21}, {0.00}, {0.01}, {0.00}, {0.01}, {0.00}, {0.31}, {0.39}, {0.34}, {0.42}, {0.04}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.21}, {0.23}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_seven = {{0.00}, {0.00}, {0.00}, {0.02}, {0.01}, {0.02}, {0.03}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.03}, {0.31}, {0.50}, {0.30}, {0.00}, {0.00}, {0.01}, {0.01}, {0.11}, {0.69}, {0.78}, {0.56}, {0.93}, {0.82}, {0.00}, {0.00}, {0.02}, {0.00}, {0.64}, {0.90}, {0.21}, {0.00}, {0.83}, {0.36}, {0.00}, {0.01}, {0.02}, {0.00}, {0.24}, {0.09}, {0.00}, {0.75}, {0.61}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.33}, {0.92}, {0.06}, {0.01}, {0.01}, {0.00}, {0.00}, {0.00}, {0.01}, {0.15}, {0.83}, {0.18}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.01}, {0.02}, {0.71}, {0.42}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.06}, {0.44}, {0.02}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_seven_variation = {{0.00}, {0.00}, {0.02}, {0.02}, {0.02}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.04}, {0.27}, {0.37}, {0.41}, {0.34}, {0.05}, {0.00}, {0.00}, {0.00}, {0.00}, {0.11}, {0.52}, {0.55}, {0.54}, {0.70}, {0.54}, {0.00}, {0.02}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.32}, {0.54}, {0.00}, {0.06}, {0.01}, {0.02}, {0.01}, {0.05}, {0.24}, {0.39}, {0.76}, {0.78}, {0.53}, {0.31}, {0.00}, {0.02}, {0.00}, {0.38}, {0.65}, {0.47}, {0.79}, {0.33}, {0.07}, {0.00}, {0.00}, {0.02}, {0.01}, {0.04}, {0.01}, {0.00}, {0.53}, {0.18}, {0.00}, {0.02}, {0.00}, {0.01}, {0.01}, {0.00}, {0.01}, {0.02}, {0.28}, {0.14}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_eight = {{0.00}, {0.00}, {0.00}, {0.01}, {0.02}, {0.02}, {0.02}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.14}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.33}, {0.52}, {0.51}, {0.71}, {0.02}, {0.00}, {0.00}, {0.01}, {0.00}, {0.26}, {0.84}, {0.30}, {0.88}, {0.45}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.11}, {0.72}, {0.68}, {0.55}, {0.00}, {0.01}, {0.00}, {0.00}, {0.01}, {0.00}, {0.11}, {0.98}, {0.78}, {0.02}, {0.01}, {0.01}, {0.00}, {0.01}, {0.01}, {0.09}, {0.63}, {0.62}, {0.56}, {0.00}, {0.02}, {0.00}, {0.00}, {0.02}, {0.00}, {0.42}, {0.63}, {0.57}, {0.39}, {0.00}, {0.01}, {0.00}, {0.00}, {0.02}, {0.00}, {0.22}, {0.78}, {0.39}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}};
std::vector<std::vector<float>> input_nine = {{0.00}, {0.00}, {0.00}, {0.01}, {0.02}, {0.02}, {0.02}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.02}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.00}, {0.25}, {0.51}, {0.34}, {0.14}, {0.00}, {0.00}, {0.01}, {0.02}, {0.00}, {0.40}, {0.70}, {0.29}, {0.98}, {0.29}, {0.00}, {0.01}, {0.02}, {0.00}, {0.38}, {0.73}, {0.09}, {0.53}, {0.60}, {0.00}, {0.01}, {0.00}, {0.02}, {0.00}, {0.47}, {0.71}, {0.61}, {0.94}, {0.11}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.02}, {0.14}, {0.18}, {0.69}, {0.02}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.20}, {0.69}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.01}, {0.08}, {0.69}, {0.13}, {0.00}, {0.01}, {0.00}, {0.00}, {0.00}, {0.00}, {0.01}, {0.00}, {0.29}, {0.31}, {0.00}, {0.02}, {0.00}};

std::vector<std::vector<std::vector<float>>> inputs_zero = {};
std::vector<std::vector<std::vector<float>>> inputs_one = {};
std::vector<std::vector<std::vector<float>>> inputs_two = {};
std::vector<std::vector<std::vector<float>>> inputs_three = {};
std::vector<std::vector<std::vector<float>>> inputs_four = {};
std::vector<std::vector<std::vector<float>>> inputs_five = {};
std::vector<std::vector<std::vector<float>>> inputs_six = {};
std::vector<std::vector<std::vector<float>>> inputs_seven = {};
std::vector<std::vector<std::vector<float>>> inputs_eight = {};
std::vector<std::vector<std::vector<float>>> inputs_nine = {};

void collect_MNIST_min()
{
    for (int d = 0; d <= 1; d++)
    {
        std::cout << "Collecting for digit " << d << std::endl;
        for (int e = 0; e < 100; e++)
        {
            std::cout << "Collection number: " << e << std::endl;
            std::string path = "C:/Users/anonymous/Desktop/MNIST Dataset JPG format/MNIST - JPG - training/" + std::to_string(d);
            std::vector<std::string> files = getFilenames(path);

            switch (d)
            {
            case 0:
                inputs_zero.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 1:
                inputs_one.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 2:
                inputs_two.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 3:
                inputs_three.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 4:
                inputs_four.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 5:
                inputs_five.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 6:
                inputs_six.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 7:
                inputs_seven.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 8:
                inputs_eight.push_back(process_img(path + "/" + files[e] + ".jpg"));
            case 9:
                inputs_nine.push_back(process_img(path + "/" + files[e] + ".jpg"));
            }
            std::cout << "Finished collection for: " << d << std::endl;
        }
    }
}

neural::layer hidden1__(neural::activation::Sigmoid,
                        {{0.030000, 0.140000, 0.050000, 0.014724, -0.155276, -0.150000, -0.030000, 0.044724, 0.212362, -0.110000, -0.040000, 0.140000, -0.030000, -0.145276, 0.150000, 0.256686, 0.135486, 0.094905, -0.057638, 0.050000, 0.190000, -0.100000, 0.004724, -0.140000, -0.047396, 0.226190, -0.005173, 0.137103, 0.020000, 0.051748, 0.010000, -0.115276, 0.140000, 0.141377, 0.364380, 0.209468, -0.042410, 0.055179, 0.098834, -0.220000, -0.117638, 0.000000, -0.032823, 0.283613, -0.125862, -0.123389, -0.207183, 0.008951, 0.118986, -0.090000, 0.034724, 0.120000, -0.028900, -0.093715, -0.054798, -0.258661, -0.098190, 0.272448, 0.190705, -0.120000, -0.035276, -0.220614, 0.346438, 0.104719, -0.139526, 0.049813, 0.218186, 0.142604, -0.060000, 0.080000, 0.044724, -0.130614, 0.056438, 0.098109, -0.020321, 0.067142, -0.154481, -0.070000, 0.024724, -0.190000, 0.222362, 0.180000, 0.220705, -0.085446, 0.233305, 0.079448, -0.160614, -0.105276, -0.080000, -0.190000, -0.170000, 0.220000, 0.010000, 0.128773, -0.011841, -0.120614, -0.177638, 0.050000, -0.100000, -0.020000},
                         {0.100000, -0.090000, 0.000000, -0.072118, -0.062118, 0.180000, -0.220000, -0.152118, -0.151059, 0.160000, -0.050000, -0.170000, -0.100000, -0.072118, 0.060000, 0.184592, -0.214679, -0.153090, 0.198941, -0.190000, 0.140000, 0.000000, 0.167882, 0.080000, -0.232254, -0.215866, -0.100866, -0.102727, 0.210000, -0.140495, -0.050000, -0.092118, -0.190000, -0.151125, -0.210573, -0.007210, -0.172267, -0.118109, 0.106330, 0.080000, -0.081059, -0.070000, 0.203625, 0.037988, -0.011952, 0.149090, 0.095799, 0.085307, -0.221668, 0.100000, 0.117882, 0.220000, -0.152955, 0.082361, 0.151191, 0.045548, -0.015293, 0.084319, 0.206237, 0.060000, 0.177882, -0.129436, -0.145637, 0.217307, 0.154733, 0.170396, -0.226132, -0.102254, -0.050000, -0.110000, -0.002118, 0.050564, -0.255637, -0.189059, -0.126580, -0.229400, -0.029079, 0.090000, 0.107882, 0.050000, 0.048941, -0.110000, -0.093762, -0.211270, -0.184592, 0.185766, -0.179436, 0.087882, 0.200000, 0.200000, -0.050000, -0.010000, 0.000000, 0.071129, -0.148307, -0.169436, -0.021059, 0.130000, 0.070000, -0.120000},
                         {0.050000, -0.100000, 0.130000, -0.117474, -0.207474, -0.160000, -0.040000, -0.207474, 0.141263, -0.100000, 0.160000, -0.160000, 0.020000, 0.152526, -0.080000, 0.200312, 0.110689, 0.014886, 0.141263, -0.050000, -0.200000, -0.120000, -0.197474, 0.210000, -0.060699, 0.016300, 0.174985, -0.025578, 0.110000, 0.071411, 0.100000, 0.112526, -0.020000, 0.129596, -0.050014, 0.218039, 0.240532, 0.305358, 0.055200, 0.000000, 0.211263, 0.190000, 0.100356, 0.308661, 0.122755, 0.002833, -0.135870, -0.038960, 0.246670, -0.180000, 0.032526, -0.150000, 0.005928, 0.156835, 0.070768, 0.209293, -0.113685, 0.303861, 0.056419, -0.160000, 0.072526, -0.039852, -0.081693, 0.087012, -0.065692, 0.192126, 0.079718, 0.169301, -0.180000, 0.160000, 0.112526, 0.010148, 0.248307, 0.301430, 0.242061, -0.115274, -0.124488, 0.010000, 0.072526, 0.100000, 0.181263, -0.040000, 0.016419, 0.155285, 0.271786, 0.205052, -0.099852, 0.072526, -0.200000, -0.070000, -0.170000, 0.110000, -0.120000, -0.199705, -0.029557, -0.059852, 0.111263, 0.060000, -0.110000, -0.030000},
                         {0.160000, -0.180000, -0.160000, 0.160694, 0.210694, -0.020000, -0.030000, -0.159306, -0.159653, 0.010000, 0.030000, 0.220000, -0.080000, 0.110694, -0.170000, -0.001671, -0.140032, 0.214978, -0.179653, -0.200000, 0.000000, 0.200000, -0.089306, 0.100000, 0.172275, -0.015299, 0.249354, -0.063669, -0.130000, -0.068135, -0.190000, 0.130694, -0.210000, 0.165310, 0.212966, 0.252005, -0.057808, 0.200838, -0.177094, 0.190000, 0.170347, -0.060000, -0.122930, -0.031415, 0.060817, 0.352042, 0.142496, -0.112239, 0.108805, 0.060000, 0.140694, -0.080000, 0.092339, 0.195615, 0.210794, -0.084383, -0.038265, -0.048511, 0.054511, 0.070000, 0.190694, -0.138482, -0.138485, -0.149740, 0.047219, -0.164718, 0.153379, 0.222275, 0.130000, 0.000000, 0.180694, -0.118482, 0.181515, -0.042686, -0.037552, 0.086025, 0.131234, 0.000000, -0.099306, -0.120000, -0.179653, -0.160000, 0.174512, 0.141267, 0.193905, -0.128612, -0.138482, 0.020694, -0.210000, 0.080000, 0.070000, 0.080000, 0.020000, -0.166965, 0.154553, 0.021518, 0.180347, 0.150000, 0.200000, 0.080000},
                         {0.040000, -0.180000, 0.070000, -0.015511, -0.115511, 0.040000, 0.180000, 0.134489, 0.012244, -0.190000, -0.040000, -0.200000, 0.020000, 0.124489, 0.050000, 0.263863, -0.059921, 0.104885, 0.212244, -0.140000, -0.160000, -0.170000, -0.065511, -0.040000, 0.248973, 0.324428, 0.214324, 0.252735, 0.180000, -0.078356, -0.180000, 0.204489, -0.020000, 0.237772, 0.433207, -0.046685, 0.164264, 0.037366, -0.091623, -0.200000, 0.092244, -0.180000, -0.084691, 0.294454, -0.088695, -0.062219, -0.176806, 0.199543, 0.246530, 0.040000, -0.165511, 0.050000, 0.154057, -0.009007, -0.083816, -0.077814, -0.018778, 0.032832, -0.060824, 0.020000, -0.165511, -0.020600, 0.129146, -0.057009, -0.118221, -0.181894, 0.080790, -0.071027, 0.180000, 0.080000, 0.004489, 0.139400, 0.029146, -0.020119, 0.062710, 0.088322, 0.152240, -0.070000, 0.154489, -0.210000, -0.137756, -0.100000, 0.029176, 0.018597, 0.168231, 0.218977, -0.070600, -0.085511, 0.160000, 0.100000, -0.140000, -0.060000, -0.020000, -0.111200, -0.061801, 0.089400, -0.107756, 0.090000, 0.120000, -0.120000},
                         {0.140000, 0.190000, 0.010000, 0.140454, -0.079546, 0.160000, -0.170000, 0.080454, -0.079773, 0.180000, -0.050000, 0.110000, 0.090000, 0.110454, -0.100000, 0.115448, -0.199859, 0.187294, 0.040227, 0.220000, -0.190000, 0.030000, -0.109546, -0.040000, 0.058089, -0.007300, -0.117763, -0.056862, -0.200000, -0.018721, -0.150000, 0.080454, -0.180000, 0.000194, 0.231565, 0.006092, 0.208089, 0.230473, 0.021960, 0.200000, 0.110227, 0.000000, -0.125316, -0.041241, 0.024096, 0.031567, -0.110530, 0.018161, 0.035819, -0.040000, 0.190454, 0.180000, -0.015328, -0.179785, -0.043168, 0.006307, -0.188865, -0.059281, -0.017049, 0.220000, 0.120454, -0.078948, 0.074075, -0.165392, 0.292092, -0.112686, -0.094647, -0.181911, -0.090000, 0.050000, 0.180454, 0.061052, 0.024075, -0.018920, 0.237079, 0.007026, -0.012592, -0.080000, 0.050454, 0.110000, -0.169773, -0.130000, 0.072951, -0.009774, 0.036755, -0.089092, 0.011052, 0.220454, -0.180000, -0.190000, 0.060000, 0.100000, 0.220000, 0.152105, 0.073157, 0.081052, 0.170227, 0.000000, 0.020000, -0.100000},
                         {-0.010000, 0.150000, -0.040000, 0.060380, -0.019620, 0.170000, 0.120000, 0.020380, 0.040190, -0.200000, 0.150000, -0.210000, 0.050000, -0.219620, -0.030000, 0.004563, -0.076031, 0.159328, 0.090190, -0.110000, 0.090000, 0.070000, 0.080380, -0.030000, -0.013547, 0.099012, 0.211136, -0.108079, 0.170000, 0.170749, -0.040000, -0.169620, -0.030000, -0.152428, 0.168061, 0.183767, 0.144762, 0.015534, 0.061319, -0.140000, -0.119810, -0.190000, -0.146399, -0.104612, 0.039227, -0.081344, 0.125660, 0.215209, 0.174551, -0.030000, 0.080380, 0.030000, 0.021966, 0.138555, -0.129173, 0.055234, 0.040951, 0.116709, 0.022472, 0.010000, 0.220380, -0.139441, 0.021787, 0.029641, 0.174249, -0.029688, 0.012536, 0.176453, -0.020000, -0.170000, 0.180380, -0.179441, 0.131787, 0.249201, -0.004455, 0.204259, -0.194118, -0.070000, -0.059620, 0.150000, -0.079810, -0.090000, -0.217528, 0.142044, -0.027273, -0.069240, 0.120559, 0.090380, 0.100000, -0.170000, 0.220000, 0.180000, -0.140000, 0.181119, 0.201678, -0.099441, -0.119810, -0.190000, 0.210000, -0.180000},
                         {0.020000, -0.220000, -0.100000, 0.112786, -0.087214, 0.150000, 0.130000, 0.192785, -0.073608, -0.060000, 0.010000, -0.100000, 0.050000, -0.197215, 0.080000, -0.006574, -0.072597, 0.002909, 0.016392, 0.090000, 0.180000, -0.170000, 0.172785, 0.110000, -0.209942, -0.340726, -0.080430, 0.004239, 0.140000, 0.108275, 0.210000, 0.042786, 0.210000, 0.113823, -0.152689, -0.298425, 0.122950, -0.202274, 0.137454, -0.090000, -0.203608, -0.210000, -0.045833, -0.149483, -0.065120, -0.026209, 0.242714, -0.218580, -0.073870, -0.050000, -0.087214, 0.200000, -0.234552, -0.082326, 0.087434, -0.091393, -0.178037, -0.172030, -0.096895, 0.170000, 0.132785, -0.138117, -0.233650, 0.039667, 0.092618, -0.033241, -0.235375, -0.269942, 0.100000, 0.110000, 0.162785, 0.041883, -0.203650, -0.046243, -0.167002, -0.350545, -0.019121, -0.030000, -0.097214, 0.170000, 0.136392, -0.010000, 0.023105, 0.134606, 0.001132, 0.075571, 0.131883, -0.167215, -0.120000, 0.130000, 0.020000, -0.110000, 0.060000, 0.103765, 0.005648, -0.048117, -0.093608, -0.050000, 0.000000, -0.180000},
                         {0.080000, -0.120000, 0.190000, -0.144342, 0.195658, 0.210000, 0.090000, -0.004342, 0.077829, -0.150000, -0.020000, -0.020000, -0.150000, 0.005658, 0.010000, 0.007899, -0.058012, -0.037200, 0.187829, -0.210000, 0.040000, -0.090000, 0.055658, 0.150000, -0.236851, -0.037086, -0.318817, 0.021265, -0.160000, 0.148275, -0.030000, -0.024342, 0.140000, 0.004042, -0.126231, -0.245436, -0.194549, -0.063215, -0.138237, -0.070000, 0.007829, 0.080000, -0.034288, -0.078881, 0.019300, 0.118836, -0.127501, -0.383668, 0.154858, 0.130000, -0.104342, 0.170000, -0.329805, 0.002312, -0.087413, 0.058123, 0.129145, -0.337117, 0.091779, -0.100000, 0.085658, 0.010446, -0.074593, -0.236131, -0.006700, -0.238931, 0.043682, -0.116851, -0.060000, -0.060000, 0.035658, 0.100446, -0.274593, -0.306232, -0.266939, -0.002814, -0.200338, 0.030000, 0.065658, 0.090000, -0.212171, -0.080000, 0.091779, -0.015494, -0.138700, -0.058683, -0.219554, 0.045658, 0.080000, -0.010000, 0.210000, -0.050000, -0.190000, -0.029107, 0.061339, 0.110446, -0.002171, -0.130000, 0.190000, -0.180000},
                         {0.060000, -0.100000, -0.040000, -0.161948, 0.038052, 0.220000, -0.130000, -0.021948, 0.169026, -0.060000, 0.180000, -0.060000, -0.190000, 0.028052, 0.190000, -0.003371, -0.205101, 0.099238, -0.060974, 0.200000, -0.130000, -0.190000, 0.058052, 0.120000, -0.180114, 0.052621, -0.089797, -0.068399, 0.070000, -0.170900, -0.160000, -0.061948, 0.140000, -0.199966, -0.052511, -0.252467, -0.200703, 0.025126, -0.103822, -0.180000, -0.000974, -0.200000, -0.205506, -0.015881, 0.126248, 0.156449, 0.102076, -0.227903, 0.059624, 0.130000, -0.081948, -0.140000, -0.168354, -0.033821, -0.084588, -0.125330, 0.055131, 0.040297, -0.202660, 0.140000, 0.168052, 0.140074, -0.230375, -0.195378, -0.152809, -0.114616, 0.098725, -0.240114, 0.110000, 0.040000, 0.158052, 0.050074, 0.079625, 0.068927, -0.129897, -0.073035, 0.152808, 0.040000, -0.021948, -0.100000, -0.080974, 0.030000, 0.187340, 0.117958, 0.107058, -0.203896, 0.180074, -0.171948, 0.090000, 0.180000, -0.150000, 0.040000, -0.090000, 0.190148, 0.100222, -0.169926, -0.110974, -0.070000, -0.160000, 0.120000},
                         {-0.220000, -0.120000, 0.030000, -0.058121, -0.178121, 0.120000, -0.210000, 0.011879, 0.000940, 0.090000, -0.060000, -0.060000, 0.060000, -0.048121, 0.180000, 0.022548, -0.073853, -0.004584, 0.130940, -0.150000, -0.060000, -0.010000, 0.191879, 0.140000, -0.020654, 0.303951, 0.148874, 0.004604, -0.080000, 0.171161, 0.180000, 0.131879, -0.200000, 0.119788, -0.090746, 0.182617, 0.114494, 0.174052, 0.033979, 0.080000, 0.050940, 0.170000, -0.114747, -0.026497, 0.245257, 0.189234, 0.146190, -0.034839, 0.019951, 0.090000, 0.141879, -0.120000, 0.166592, -0.167721, -0.133861, -0.046072, -0.175302, 0.257482, -0.147786, -0.180000, -0.138121, 0.030221, -0.091750, 0.223323, -0.068555, 0.157906, 0.129410, 0.219346, 0.110000, 0.020000, 0.191879, -0.059779, 0.128250, 0.031688, 0.225052, 0.260464, 0.166528, 0.080000, -0.198121, 0.040000, -0.159060, -0.150000, -0.207786, 0.221571, 0.128744, -0.216242, 0.100221, 0.061879, -0.040000, -0.120000, -0.170000, 0.180000, 0.080000, 0.080442, -0.049337, -0.199779, 0.100940, -0.180000, -0.220000, -0.020000},
                         {0.150000, -0.010000, 0.010000, 0.183142, 0.143142, -0.040000, -0.110000, 0.193142, 0.176571, -0.070000, -0.190000, -0.170000, 0.200000, 0.083142, 0.040000, -0.032299, -0.338607, 0.113255, 0.066571, 0.090000, -0.100000, -0.060000, -0.106858, -0.190000, 0.096204, -0.532915, -0.335520, 0.009542, -0.180000, 0.049078, 0.030000, -0.126858, 0.150000, -0.218783, -0.455770, 0.087328, -0.107207, -0.427219, -0.191210, 0.210000, 0.146571, -0.220000, -0.052359, -0.274967, 0.084327, 0.278114, 0.270198, -0.414333, 0.000495, -0.220000, -0.226858, 0.020000, -0.163243, -0.064311, 0.223015, 0.277945, 0.032854, -0.226177, 0.065421, 0.220000, -0.216858, -0.217493, -0.322608, -0.119020, 0.183185, -0.012274, -0.163530, -0.033796, -0.120000, 0.110000, -0.046858, -0.067493, -0.122608, -0.282845, 0.091593, -0.377187, -0.223509, 0.020000, -0.026858, 0.170000, 0.196571, 0.050000, -0.114579, 0.140696, 0.074936, 0.146283, 0.112507, 0.123142, 0.100000, 0.140000, 0.010000, -0.220000, 0.040000, -0.014986, 0.127521, 0.082507, -0.073429, 0.160000, 0.070000, 0.030000},
                         {-0.080000, 0.080000, 0.190000, -0.196047, -0.136047, 0.040000, -0.060000, 0.213953, -0.173023, 0.160000, 0.060000, -0.060000, 0.220000, 0.013953, -0.020000, 0.077442, -0.112884, -0.129677, 0.006977, -0.020000, 0.030000, 0.150000, 0.023953, -0.110000, -0.232697, -0.132324, -0.098522, -0.151637, 0.200000, -0.032000, 0.020000, -0.196047, 0.080000, -0.050651, -0.357208, -0.170377, 0.122081, -0.337442, -0.051070, -0.060000, 0.006977, 0.030000, 0.012651, -0.074789, -0.087396, -0.120990, 0.158647, -0.111859, -0.102465, -0.150000, -0.156047, 0.080000, -0.000372, -0.016046, -0.035313, 0.014456, 0.204884, -0.265860, -0.149302, -0.100000, -0.066047, 0.151023, -0.337442, -0.224749, 0.319241, 0.054928, -0.389441, -0.032697, -0.060000, -0.100000, 0.033953, 0.061023, -0.287441, -0.208011, -0.189171, -0.386743, -0.043628, -0.170000, 0.043953, 0.020000, -0.123023, -0.220000, 0.080697, -0.163684, -0.323492, 0.097907, 0.191023, 0.013953, -0.180000, -0.190000, -0.200000, 0.120000, -0.190000, -0.137954, -0.176931, -0.098977, 0.046977, -0.160000, -0.040000, 0.120000},
                         {0.170000, -0.150000, 0.200000, -0.163571, -0.103571, -0.040000, 0.010000, 0.086429, 0.063215, 0.000000, 0.080000, -0.140000, -0.060000, 0.076429, 0.220000, 0.047153, 0.202280, -0.139235, -0.086785, 0.170000, 0.080000, -0.210000, 0.086429, -0.210000, 0.198676, 0.221470, 0.290633, -0.027297, -0.160000, 0.182236, -0.070000, 0.186430, 0.000000, -0.103282, 0.525396, 0.073097, 0.028940, 0.170490, -0.028120, -0.170000, -0.106785, -0.010000, 0.100456, 0.419767, 0.212536, 0.084823, 0.172587, 0.147175, 0.106530, 0.070000, -0.023570, 0.130000, 0.161903, 0.134661, -0.271470, -0.261680, -0.053926, 0.331647, -0.108209, -0.070000, -0.183570, 0.169021, 0.369311, -0.040527, 0.065033, -0.141293, -0.008453, 0.208676, 0.130000, -0.170000, -0.033570, 0.209021, 0.149311, 0.106617, 0.064406, 0.301103, -0.060968, -0.030000, -0.053570, -0.220000, -0.166785, 0.000000, -0.138209, -0.081802, 0.213400, -0.037141, 0.199021, -0.083571, 0.210000, 0.100000, 0.130000, 0.180000, 0.060000, 0.158042, -0.182937, 0.059021, 0.073215, -0.190000, -0.180000, 0.000000},
                         {-0.170000, 0.000000, -0.050000, 0.087795, 0.177795, -0.030000, -0.070000, -0.172205, -0.191102, 0.020000, -0.110000, 0.180000, -0.080000, 0.107795, 0.220000, 0.033540, -0.081038, -0.120822, 0.178898, 0.150000, 0.070000, 0.150000, -0.202205, -0.060000, -0.144091, -0.140248, -0.081472, 0.126679, 0.130000, 0.008983, 0.080000, -0.222205, 0.220000, -0.033918, -0.254736, -0.099296, 0.065455, -0.263434, -0.164324, 0.170000, 0.108897, -0.190000, -0.227554, 0.134093, -0.216870, 0.167522, -0.167579, -0.158198, 0.036934, 0.060000, 0.167795, 0.090000, 0.113937, 0.120389, -0.173688, 0.075447, -0.195513, -0.170230, -0.154332, 0.060000, -0.102205, -0.189914, 0.081646, -0.017337, -0.071613, 0.113484, 0.120630, -0.024091, 0.070000, -0.120000, -0.032205, 0.120086, -0.258354, -0.280265, 0.052337, -0.162686, -0.040783, 0.050000, 0.097795, -0.180000, -0.181103, 0.180000, -0.014332, -0.098734, -0.198552, -0.114410, 0.080086, 0.187795, -0.150000, -0.030000, 0.010000, -0.080000, -0.220000, 0.010173, -0.139741, 0.130086, -0.191102, -0.010000, 0.050000, -0.070000},
                         {-0.180000, 0.190000, 0.150000, -0.146311, -0.186311, 0.090000, -0.190000, 0.143689, -0.038155, 0.150000, -0.040000, 0.160000, 0.220000, 0.163689, 0.110000, 0.034267, -0.046020, -0.161129, 0.001845, 0.200000, -0.110000, -0.060000, 0.033689, -0.060000, 0.226878, 0.254448, 0.287874, 0.173090, -0.150000, 0.191544, -0.220000, 0.013689, -0.010000, 0.026276, 0.045226, 0.312790, 0.084495, 0.232074, -0.062923, -0.070000, 0.081845, -0.140000, 0.079211, 0.313568, -0.006297, -0.206197, -0.098431, 0.107558, 0.118433, 0.090000, -0.146311, 0.030000, 0.300368, 0.223002, -0.121982, -0.118971, -0.210778, 0.130645, -0.146022, 0.130000, -0.066311, -0.140301, 0.224357, -0.145533, -0.189209, 0.015597, 0.075901, 0.276878, 0.020000, 0.010000, 0.003689, 0.009699, 0.014357, 0.211926, -0.036030, -0.061664, 0.261344, 0.210000, -0.176311, 0.190000, -0.028155, 0.150000, -0.046022, 0.156842, -0.042682, -0.162622, 0.099699, -0.166311, 0.080000, 0.130000, 0.040000, -0.190000, -0.110000, 0.079398, -0.130903, -0.160301, 0.141845, 0.030000, 0.140000, 0.140000},
                         {0.170000, -0.060000, 0.070000, -0.184776, 0.125224, 0.020000, 0.210000, -0.104776, -0.072388, 0.190000, -0.070000, 0.100000, 0.140000, 0.055224, 0.010000, 0.032694, -0.038264, 0.082265, 0.017612, -0.180000, -0.160000, 0.050000, -0.164776, -0.090000, -0.023580, -0.128775, -0.300554, -0.228657, 0.000000, -0.221948, -0.200000, 0.145224, 0.040000, -0.282700, -0.386836, -0.238059, -0.013330, -0.027779, 0.050889, -0.120000, 0.027612, 0.070000, -0.167764, -0.325804, 0.073826, -0.181715, 0.122322, -0.181020, 0.100297, -0.210000, -0.004776, 0.000000, -0.302825, -0.077449, 0.022125, 0.057724, -0.101939, -0.354916, -0.011041, -0.160000, -0.084776, -0.169560, -0.308040, -0.010217, -0.057314, -0.242483, -0.029988, -0.183580, -0.040000, -0.150000, 0.205224, 0.130440, 0.011960, -0.073867, -0.111627, -0.059081, 0.103584, -0.110000, 0.145224, -0.210000, 0.137612, 0.130000, 0.118959, -0.318752, -0.078834, -0.149551, 0.110440, 0.075224, -0.170000, -0.070000, 0.120000, -0.180000, 0.090000, 0.080880, 0.201320, -0.159560, 0.147612, -0.040000, 0.060000, 0.150000},
                         {-0.060000, -0.160000, 0.100000, 0.015175, 0.145175, -0.160000, -0.060000, -0.224825, -0.122413, -0.180000, 0.060000, -0.110000, -0.110000, -0.144825, -0.220000, 0.042098, -0.222631, -0.125696, -0.102413, -0.160000, 0.110000, -0.220000, -0.104825, -0.030000, 0.036406, -0.161257, -0.345571, 0.055580, 0.130000, -0.001217, -0.170000, 0.175175, -0.010000, -0.031203, -0.289194, -0.038500, -0.170057, -0.365664, -0.128454, 0.190000, -0.132413, -0.040000, -0.157405, -0.206985, -0.020750, 0.214012, -0.026525, -0.263006, -0.199468, 0.080000, 0.015175, -0.210000, -0.263559, -0.018566, -0.032725, -0.104681, -0.062063, -0.165440, 0.058636, 0.210000, 0.195175, 0.131196, -0.149579, -0.088755, 0.255968, -0.003059, 0.009204, -0.093594, 0.050000, -0.140000, 0.015175, 0.051196, -0.219579, 0.073855, -0.038693, -0.380943, 0.143644, 0.060000, 0.175175, 0.090000, 0.107587, -0.170000, -0.091363, -0.015067, -0.061090, -0.149650, -0.188804, 0.065175, -0.010000, 0.190000, 0.200000, 0.060000, -0.170000, 0.202391, 0.223587, 0.141196, -0.072413, -0.090000, 0.050000, -0.050000},
                         {-0.060000, -0.120000, -0.160000, -0.202962, -0.172962, -0.050000, 0.000000, 0.207038, -0.171480, -0.200000, 0.150000, 0.210000, -0.210000, 0.147038, 0.090000, 0.094465, -0.016664, 0.002241, 0.138520, 0.130000, -0.060000, -0.080000, 0.047039, -0.200000, 0.144426, -0.248063, -0.030391, -0.025638, -0.060000, 0.048845, 0.030000, -0.092961, 0.040000, -0.164924, -0.110660, -0.171065, -0.028626, -0.067576, -0.155598, -0.140000, 0.128520, -0.070000, -0.173365, -0.085164, -0.034414, -0.011712, -0.160896, -0.308450, -0.020768, -0.140000, 0.177038, -0.190000, -0.188513, -0.246628, -0.186264, 0.070484, 0.192597, -0.260761, 0.020752, -0.060000, -0.172962, -0.219675, -0.211799, -0.017223, -0.008461, -0.019463, -0.092954, -0.005575, -0.010000, 0.140000, -0.162962, -0.059675, 0.068201, -0.011283, -0.058538, -0.061047, -0.171133, 0.050000, 0.117039, 0.140000, -0.101480, -0.150000, -0.079248, -0.073621, -0.029980, -0.215923, -0.039675, 0.127038, -0.170000, 0.160000, 0.040000, 0.160000, 0.160000, 0.220650, 0.060975, -0.139675, 0.018520, 0.090000, -0.140000, -0.100000},
                         {-0.210000, 0.100000, 0.110000, -0.130303, 0.049697, 0.100000, -0.040000, 0.139697, 0.109848, 0.090000, -0.040000, 0.150000, 0.010000, -0.010303, 0.160000, -0.123647, 0.193997, 0.041720, 0.169848, 0.130000, -0.010000, -0.170000, 0.079696, -0.090000, -0.214584, -0.125193, 0.174719, 0.120900, -0.040000, -0.220026, -0.180000, -0.100304, -0.180000, -0.054331, -0.194433, 0.026523, -0.085029, -0.049547, 0.049518, -0.150000, 0.089848, 0.180000, 0.087695, -0.221724, 0.167213, -0.059002, 0.133539, 0.017846, 0.046935, 0.110000, 0.109696, -0.080000, 0.051010, -0.016836, 0.089228, -0.042036, 0.119241, 0.207795, -0.101975, 0.050000, 0.139697, 0.180126, 0.140581, 0.030931, -0.197738, 0.209212, 0.060555, -0.054584, -0.200000, 0.070000, -0.100304, 0.020126, 0.030581, -0.062016, -0.102569, 0.168606, -0.074128, 0.050000, -0.120304, -0.070000, 0.209848, -0.140000, -0.191975, -0.119736, 0.216171, 0.099392, -0.139874, -0.190303, -0.130000, -0.180000, 0.210000, 0.090000, -0.180000, -0.099747, 0.120379, 0.170126, 0.179848, 0.170000, -0.060000, 0.020000}},
                        {{0.474823},
                         {-0.749441},
                         {0.641051},
                         {-0.013527},
                         {0.464407},
                         {-0.572049},
                         {0.574939},
                         {-0.372460},
                         {0.127554},
                         {-0.789966},
                         {0.616059},
                         {-0.292209},
                         {0.099986},
                         {-0.476434},
                         {0.398399},
                         {-0.045664},
                         {0.105231},
                         {-0.821702},
                         {0.384452},
                         {-0.202552}});

neural::layer output__(neural::activation::Softmax,
                       {{0.077880, -0.374285, -0.423161, -0.733070, 0.012684, -0.492262, -0.393868, -0.501501, -0.007096, -0.297069, -0.433334, -0.832662, -0.230810, 0.054076, -0.412301, -0.008132, 0.014720, -0.376458, -0.335369, -0.053693},
                        {0.004820, 0.147516, 0.052583, 0.289032, 0.146853, 0.157159, 0.322419, 0.565454, 0.540014, -0.044248, 0.213672, 0.728796, 0.704829, -0.124719, -0.034336, 0.166500, 0.695296, 0.485346, 0.095472, 0.383063},
                        {0.103063, -0.071044, -0.186112, -0.433587, -0.203979, 0.089924, -0.200669, -0.563553, -0.692617, -0.634649, -0.221404, -0.623793, -0.773200, -0.642280, -0.530948, -0.449782, -0.705695, -0.128048, -0.230209, -0.627301},
                        {0.074271, -0.192801, -0.589256, -0.651602, -0.376621, -0.460212, -0.594666, -0.556387, -0.584956, 0.236398, 0.022530, -0.418301, -0.494946, -0.448789, 0.063193, 0.120871, -0.101393, 0.234473, -0.468715, -0.119740},
                        {-0.644558, -0.290104, -0.244895, -0.823587, -0.468214, -0.133281, -1.148739, -0.268684, -0.094029, -0.523906, -0.765985, -0.109004, -0.334441, 0.031896, -0.296992, -0.223161, -0.385066, -0.437400, -0.396331, -0.758881},
                        {0.065944, -0.002455, -0.246745, -0.794551, -0.021525, -0.429015, -0.486490, -0.781430, 0.036512, 0.091714, -0.810684, 0.030014, -0.519598, -0.609650, -0.298796, -0.717168, -0.226053, -0.320081, -0.447152, -0.058794},
                        {-0.506229, -0.405360, -0.257484, -0.751698, -0.807456, -0.369566, -0.234899, -0.316750, -0.811720, -0.591802, -0.439969, -0.488122, -0.236189, -0.602988, -0.026660, -0.822332, -0.723486, -0.160174, -0.107142, -0.695616},
                        {-0.343997, -0.119842, -0.965846, 0.040865, -0.402593, -0.119683, -0.262025, -0.400154, -0.341856, -0.070069, -0.756197, -0.303053, -0.576539, -0.291661, -0.646888, -0.479482, -0.068865, 0.122625, -0.050105, -0.469676},
                        {0.030526, 0.060838, -0.595096, -0.490035, -0.857884, -0.012139, -0.792035, -0.544093, -0.794456, -0.534742, -0.891599, -0.019095, -0.132068, -0.460113, -0.535937, -0.383010, -0.739789, -0.002114, -0.531708, -0.090540},
                        {-0.523865, 0.156334, -0.789073, -0.122471, 0.083889, -0.228910, 0.042473, -0.095531, 0.161287, -0.399232, 0.010143, -0.624559, -0.614859, -0.270994, -0.673363, -0.565906, -0.161609, -0.119031, 0.009884, -0.690183}},
                       {{2.265638},
                        {-2.972266},
                        {2.828100},
                        {-2.714136},
                        {-1.325189},
                        {-2.045990},
                        {-1.045876},
                        {-1.873493},
                        {-1.049538},
                        {-2.738011}});

neural::network nn(neural::createWeights_mat(100, 1), {&hidden1__,
                                                       &output__});

neural::network_v2 nn2(neural::createWeights_mat(9, 1),
                       new neural::layer(
                           neural::activation::Sigmoid,
                           neural::createWeights_mat(4, 9),
                           neural::createWeights_mat(1, 4)),
                       new neural::layer(
                           neural::activation::Softmax,
                           neural::createWeights_mat(4, 9),
                           neural::createWeights_mat(1, 4)));

int main()
{
    // while (true)
    // {
    //     try
    //     {
    //         std::vector<std::vector<float>> output = neural::feedforward(&nn);
    //         printMatrix(output);

    //         neural::backpropagate_batch(&nn, {input_zero, input_one, input_two, input_three, input_four, input_five, input_six, input_seven, input_eight, input_nine},
    //                                     {
    //                                         {{1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}},
    //                                         {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}},
    //                                     },
    //                                     2.0);
    //     }
    //     catch (const std::exception &e)
    //     {
    //         std::cerr << "Exception occurred: " << e.what() << std::endl;
    //     }

    //     std::this_thread::sleep_for(std::chrono::milliseconds(500));
    // }

    // collect_MNIST_min();

    // // do 100 epochs for each digit
    // for (int i = 0; i < 100; i++)
    // {
    //     nn.input = inputs_zero[i];
    //     std::vector<std::vector<float>> output = neural::feedforward(&nn);
    //     printMatrix(output);
    //     neural::backpropagate_batch(&nn, {inputs_zero[i], inputs_one[i], inputs_two[i], inputs_three[i], inputs_four[i], inputs_five[i], inputs_six[i], inputs_seven[i], inputs_eight[i], inputs_nine[i]},
    //                                 {
    //                                     {{1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}, {0.0}},
    //                                     {{0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {0.0}, {1.0}},
    //                                 },
    //                                 2.0);
    //     std::this_thread::sleep_for(std::chrono::milliseconds(500));
    // }

    printMatrix(nn2[0]->weights);

    return 0;
}
